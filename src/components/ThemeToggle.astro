---
---
<button
  id="theme-toggle"
  type="button"
  class="theme-toggle"
  title="Toggle theme"
  aria-label="Toggle theme"
>
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" class="theme-toggle__icon">
    <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2" />
    <path d="M12 1V3" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
    <path d="M12 21V23" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
    <path d="M1 12H3" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
    <path d="M21 12H23" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
    <path
      d="M4.22 4.22L5.64 5.64"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
    />
    <path
      d="M18.36 18.36L19.78 19.78"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
    />
    <path
      d="M18.36 5.64L19.78 4.22"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
    />
    <path
      d="M4.22 19.78L5.64 18.36"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
    />
  </svg>
</button>

<style>
  .theme-toggle {
    border: 0;
    padding: 0;
    background: transparent;
    cursor: pointer;
    touch-action: manipulation;
    position: relative;
    --theme-toggle-size: 24px;
    -webkit-tap-highlight-color: transparent;
  }

  .theme-toggle__icon {
    position: relative;
    width: var(--theme-toggle-size);
    height: var(--theme-toggle-size);
    color: var(--color-text);
    transition: transform 0.3s ease;
  }

  :global(.dark) .theme-toggle__icon {
    transform: rotate(180deg);
  }
</style>

<script>
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();
      this.toggleTheme = this.toggleTheme.bind(this);
    }

    connectedCallback() {
      const button = this.querySelector('button');
      if (button) {
        button.addEventListener('click', this.toggleTheme);
      }
      
      // Set initial theme
      const initialTheme = this.getTheme();
      if (initialTheme) {
        this.setTheme(initialTheme);
      }
    }

    disconnectedCallback() {
      const button = this.querySelector('button');
      if (button) {
        button.removeEventListener('click', this.toggleTheme);
      }
    }

    getTheme() {
      if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
        return localStorage.getItem('theme');
      }
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }

    setTheme(theme: string) {
      document.documentElement.classList.remove('light', 'dark');
      document.documentElement.classList.add(theme);
      localStorage.setItem('theme', theme);
      document.documentElement.style.colorScheme = theme;
    }

    toggleTheme() {
      const currentTheme = this.getTheme();
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      this.setTheme(newTheme);
    }
  }

  customElements.define('theme-toggle', ThemeToggle);
</script>