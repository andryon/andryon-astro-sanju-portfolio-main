---
---
<button
  id="theme-toggle"
  type="button"
  class="theme-toggle"
  title="Toggle theme"
  aria-label="Toggle theme"
>
  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" class="theme-toggle__icon">
    <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2" />
    <path d="M12 1V3" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
    <path d="M12 21V23" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
    <path d="M1 12H3" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
    <path d="M21 12H23" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
    <path
      d="M4.22 4.22L5.64 5.64"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
    />
    <path
      d="M18.36 18.36L19.78 19.78"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
    />
    <path
      d="M18.36 5.64L19.78 4.22"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
    />
    <path
      d="M4.22 19.78L5.64 18.36"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
    />
  </svg>
</button>

<style>
  .theme-toggle {
    border: 0;
    padding: 0.5rem;
    background: transparent;
    cursor: pointer;
    touch-action: manipulation;
    position: relative;
    color: var(--theme-text);
    transition: color 0.2s ease;
  }

  .theme-toggle:hover {
    opacity: 0.8;
  }

  .theme-toggle__icon {
    transition: transform 0.3s ease;
  }

  .theme-toggle:hover .theme-toggle__icon {
    transform: rotate(15deg);
  }
</style>

<script>
  class ThemeToggle extends HTMLElement {
    private button: HTMLButtonElement | null;

    constructor() {
      super();
      this.button = this.querySelector('#theme-toggle');
      this.setupTheme();
      this.setupListeners();
    }

    connectedCallback() {
      this.setupTheme();
      this.setupListeners();
    }

    setupTheme() {
      const theme = this.getTheme();
      this.setTheme(theme);
    }

    setupListeners() {
      if (this.button) {
        this.button.addEventListener('click', () => {
          const currentTheme = this.getTheme();
          this.setTheme(currentTheme === 'dark' ? 'light' : 'dark');
        });
      }
    }

    getTheme(): string {
      if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
        return localStorage.getItem('theme') || 'light';
      }
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }

    setTheme(theme: string): void {
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
        document.documentElement.style.setProperty('--theme-bg', '#000000');
        document.documentElement.style.setProperty('--theme-text', '#ffffff');
      } else {
        document.documentElement.classList.remove('dark');
        document.documentElement.style.setProperty('--theme-bg', '#ffffff');
        document.documentElement.style.setProperty('--theme-text', '#000000');
      }
      localStorage.setItem('theme', theme);
    }
  }

  if (!customElements.get('theme-toggle')) {
    customElements.define('theme-toggle', ThemeToggle);
  }
</script>