---
interface Props {
  src: string;
  alt: string;
  class?: string;
  width?: number;
  height?: number;
}

const { src, alt, class: className = '', width, height } = Astro.props;
---

<div class={`image-wrapper relative overflow-hidden ${className}`}>
  <img
    src={src}
    alt={alt}
    width={width}
    height={height}
    loading="lazy"
    decoding="async"
    class="w-full h-full object-cover object-center transition-all duration-500 opacity-0 scale-105"
    onload="this.classList.remove('opacity-0', 'scale-105'); this.classList.add('opacity-100', 'scale-100');"
  />
  <div class="placeholder absolute inset-0 bg-gradient-to-br from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-800">
    <div class="absolute inset-0 animate-shimmer bg-gradient-to-r from-transparent via-white/10 to-transparent"></div>
  </div>
</div>

<style>
  .image-wrapper img.opacity-100 + .placeholder {
    display: none;
  }
  
  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }
  
  .animate-shimmer {
    animation: shimmer 1.5s infinite;
  }
</style>

<script>
  // Implement Intersection Observer for better lazy loading
  document.addEventListener('DOMContentLoaded', () => {
    const imageWrappers = document.querySelectorAll('.image-wrapper');
    
    if ('IntersectionObserver' in window) {
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target.querySelector('img');
            if (img && img.getAttribute('data-src')) {
              const dataSrc = img.getAttribute('data-src');
              if (dataSrc) {
                img.src = dataSrc;
              }
              img.removeAttribute('data-src');
            }
            observer.unobserve(entry.target);
          }
        });
      }, { 
        rootMargin: '50px',
        threshold: 0.1
      });
      
      imageWrappers.forEach(wrapper => {
        observer.observe(wrapper);
      });
    }
  });
</script>